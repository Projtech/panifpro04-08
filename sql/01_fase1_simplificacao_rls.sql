-- =====================================================
-- FASE 1: SIMPLIFICA√á√ÉO RADICAL DAS POL√çTICAS RLS
-- =====================================================
-- Este script resolve o problema de recurs√£o circular nas pol√≠ticas RLS
-- eliminando fun√ß√µes problem√°ticas e implementando pol√≠ticas diretas

-- Backup das pol√≠ticas atuais (para rollback se necess√°rio)
CREATE TABLE IF NOT EXISTS rls_policies_backup AS
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename = 'company_users';

-- =====================================================
-- 1. REMO√á√ÉO DAS FUN√á√ïES RECURSIVAS PROBLEM√ÅTICAS
-- =====================================================

-- Remover todas as pol√≠ticas existentes da tabela company_users
DROP POLICY IF EXISTS "Users can view their own company users" ON public.company_users;
DROP POLICY IF EXISTS "Users can insert company users for their company" ON public.company_users;
DROP POLICY IF EXISTS "Users can update company users for their company" ON public.company_users;
DROP POLICY IF EXISTS "Users can delete company users for their company" ON public.company_users;
DROP POLICY IF EXISTS "Admins can manage company users" ON public.company_users;
DROP POLICY IF EXISTS "Company admins can manage users" ON public.company_users;
DROP POLICY IF EXISTS "Users can view company users" ON public.company_users;
DROP POLICY IF EXISTS "Superadmins full access" ON public.company_users;
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON public.company_users;
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON public.company_users;
DROP POLICY IF EXISTS "Enable update for authenticated users" ON public.company_users;
DROP POLICY IF EXISTS "Enable delete for authenticated users" ON public.company_users;

-- Remover fun√ß√µes recursivas problem√°ticas
DROP FUNCTION IF EXISTS public.get_user_company_id();
DROP FUNCTION IF EXISTS public.get_my_admin_company_id();
DROP FUNCTION IF EXISTS public.is_company_admin();
DROP FUNCTION IF EXISTS public.user_has_company_access(uuid, uuid);

-- =====================================================
-- 2. CRIA√á√ÉO DE POL√çTICAS SIMPLIFICADAS E DIRETAS
-- =====================================================

-- Pol√≠tica 1: Usu√°rios podem ver seus pr√≥prios registros
CREATE POLICY "users_own_records" ON public.company_users
    FOR SELECT
    USING (user_id = auth.uid());

-- Pol√≠tica 2: Admins podem gerenciar usu√°rios da sua empresa (usando subquery direta)
CREATE POLICY "admins_manage_company" ON public.company_users
    FOR ALL
    USING (
        EXISTS (
            SELECT 1 FROM public.company_users admin_check
            WHERE admin_check.user_id = auth.uid()
            AND admin_check.company_id = company_users.company_id
            AND admin_check.role IN ('admin', 'owner')
            AND admin_check.status = 'active'
        )
    )
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.company_users admin_check
            WHERE admin_check.user_id = auth.uid()
            AND admin_check.company_id = company_users.company_id
            AND admin_check.role IN ('admin', 'owner')
            AND admin_check.status = 'active'
        )
    );

-- Pol√≠tica 3: Usu√°rios podem atualizar seus pr√≥prios registros (dados pessoais)
CREATE POLICY "users_update_own" ON public.company_users
    FOR UPDATE
    USING (user_id = auth.uid())
    WITH CHECK (user_id = auth.uid());

-- Pol√≠tica 4: Superadmins t√™m acesso total (baseado em email)
CREATE POLICY "superadmins_full_access" ON public.company_users
    FOR ALL
    USING (
        auth.jwt() ->> 'email' IN (
            'jcesar.projtech@gmail.com',
            'admin@panifpro.com'
        )
    )
    WITH CHECK (
        auth.jwt() ->> 'email' IN (
            'jcesar.projtech@gmail.com',
            'admin@panifpro.com'
        )
    );

-- =====================================================
-- 3. MANTER FUN√á√ÉO FUNCIONAL (N√ÉO RECURSIVA)
-- =====================================================

-- Manter a fun√ß√£o get_active_company_for_user que funciona bem
-- (ela n√£o causa recurs√£o porque usa SECURITY DEFINER)
-- Esta fun√ß√£o j√° existe e est√° funcionando corretamente

-- =====================================================
-- 4. OTIMIZA√á√ÉO E √çNDICES
-- =====================================================

-- Criar √≠ndices para otimizar as consultas das pol√≠ticas
CREATE INDEX IF NOT EXISTS idx_company_users_user_company 
    ON public.company_users(user_id, company_id);

CREATE INDEX IF NOT EXISTS idx_company_users_company_role_status 
    ON public.company_users(company_id, role, status);

-- =====================================================
-- 5. VERIFICA√á√ÉO E TESTES
-- =====================================================

-- Verificar pol√≠ticas criadas
SELECT 
    policyname,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE tablename = 'company_users'
ORDER BY policyname;

-- Fun√ß√£o de teste para validar as pol√≠ticas
CREATE OR REPLACE FUNCTION test_rls_policies()
RETURNS TABLE(
    test_name text,
    result boolean,
    message text
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Teste 1: Verificar se as pol√≠ticas foram criadas
    RETURN QUERY
    SELECT 
        'Pol√≠ticas criadas'::text,
        (SELECT COUNT(*) FROM pg_policies WHERE tablename = 'company_users') = 4,
        'Deve ter exatamente 4 pol√≠ticas'::text;
    
    -- Teste 2: Verificar se fun√ß√µes recursivas foram removidas
    RETURN QUERY
    SELECT 
        'Fun√ß√µes recursivas removidas'::text,
        NOT EXISTS(SELECT 1 FROM pg_proc WHERE proname IN ('get_user_company_id', 'get_my_admin_company_id')),
        'Fun√ß√µes recursivas n√£o devem existir'::text;
    
    -- Teste 3: Verificar se fun√ß√£o funcional ainda existe
    RETURN QUERY
    SELECT 
        'Fun√ß√£o funcional mantida'::text,
        EXISTS(SELECT 1 FROM pg_proc WHERE proname = 'get_active_company_for_user'),
        'Fun√ß√£o get_active_company_for_user deve existir'::text;
END;
$$;

-- Executar testes
SELECT * FROM test_rls_policies();

-- =====================================================
-- 6. NOTIFICA√á√ïES DE CONCLUS√ÉO
-- =====================================================

-- Log de conclus√£o
DO $$
BEGIN
    RAISE NOTICE '‚úÖ FASE 1 CONCLU√çDA: Simplifica√ß√£o das Pol√≠ticas RLS';
    RAISE NOTICE 'üìã Pol√≠ticas criadas: users_own_records, admins_manage_company, users_update_own, superadmins_full_access';
    RAISE NOTICE 'üóëÔ∏è Fun√ß√µes recursivas removidas: get_user_company_id, get_my_admin_company_id';
    RAISE NOTICE '‚úÖ Fun√ß√£o funcional mantida: get_active_company_for_user';
    RAISE NOTICE 'üîç √çndices criados para otimiza√ß√£o';
    RAISE NOTICE '‚ö° Sistema deve estar mais est√°vel agora!';
END $$;